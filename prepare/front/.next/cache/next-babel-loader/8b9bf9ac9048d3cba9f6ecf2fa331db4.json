{"ast":null,"code":"import { all, fork, takeLatest, delay, put, throttle, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_FAILURE, LOAD_POST_SUCCESS, generateDummyPost, LIKE_FAILURE, LIKE_SUCCESS, LIKE_REQUEST, UNLIKE_FAILURE, UNLIKE_REQUEST, UNLIKE_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\nimport shortId from 'shortid';\n\nfunction addPostAPI(data) {\n  return axios.post('/post', {\n    content: data\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      //saga는 동시에 여러 액션을 디스패치 가능. 어떤 액션이 여러 리듀서의 데이터를 동시에 바꿔야 한다면 이렇게 액션 여러 번 호출\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction loadPostAPI(data) {\n  return axios.get('/post', data);\n}\n\nfunction* loadPost(action) {\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete('/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000); // const result = yield call(addPostAPI, action.data)\n\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      //이건 포스트 리듀서 조작 부분, 밑에는 유저 리듀서 조작 부분\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      //saga는 동시에 여러 액션을 디스패치 가능. 어떤 액션이 여러 리듀서의 데이터를 동시에 바꿔야 한다면 이렇게 액션 여러 번 호출\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    yield delay(1000); // const result = yield call(addPostAPI, action.data)\n\n    yield put({\n      type: LIKE_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LIKE_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction unLikePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* unLikePost(action) {\n  try {\n    yield delay(1000); // const result = yield call(addPostAPI, action.data)\n\n    yield put({\n      type: UNLIKE_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNLIKE_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchLoadPost() {\n  yield throttle(1000, LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_REQUEST, likePost);\n}\n\nfunction* watchUnLikePost() {\n  yield takeLatest(UNLIKE_REQUEST, unLikePost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPost), fork(watchRemovePost), fork(watchAddComment), fork(watchLikePost), fork(watchUnLikePost)]);\n}","map":{"version":3,"names":["all","fork","takeLatest","delay","put","throttle","call","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_FAILURE","LOAD_POST_SUCCESS","generateDummyPost","LIKE_FAILURE","LIKE_SUCCESS","LIKE_REQUEST","UNLIKE_FAILURE","UNLIKE_REQUEST","UNLIKE_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","shortId","addPostAPI","data","post","content","addPost","action","result","type","id","err","response","loadPostAPI","get","loadPost","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","likePostAPI","likePost","unLikePostAPI","patch","unLikePost","watchAddPost","watchLoadPost","watchRemovePost","watchAddComment","watchLikePost","watchUnLikePost","postSaga"],"sources":["/Users/gojieun/Desktop/meong/prepare/front/sagas/post.js"],"sourcesContent":["import { all, fork, takeLatest, delay, put, throttle, call} from 'redux-saga/effects';\nimport axios from 'axios';\nimport {\n    ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\n    ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS,\n    REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\n    LOAD_POST_REQUEST, LOAD_POST_FAILURE, LOAD_POST_SUCCESS, generateDummyPost,\n    LIKE_FAILURE, LIKE_SUCCESS, LIKE_REQUEST, UNLIKE_FAILURE,\n    UNLIKE_REQUEST, UNLIKE_SUCCESS} from '../reducers/post';\nimport { ADD_POST_TO_ME , REMOVE_POST_OF_ME} from '../reducers/user';\nimport shortId from 'shortid';\n\nfunction addPostAPI(data) {\n    return axios.post('/post', {content: data})\n}\n\nfunction* addPost(action) {\n    try {\n        const result = yield call(addPostAPI, action.data)\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: result.data,\n        });\n        yield put({\n            type: ADD_POST_TO_ME, //saga는 동시에 여러 액션을 디스패치 가능. 어떤 액션이 여러 리듀서의 데이터를 동시에 바꿔야 한다면 이렇게 액션 여러 번 호출\n            data: result.data.id,\n        })\n    } catch(err) {\n        yield put({\n            type:ADD_POST_FAILURE,\n            data:err.response.data,\n        });\n    }\n}\n\nfunction loadPostAPI(data) {\n    return axios.get('/post', data)\n}\n\nfunction* loadPost(action) {\n    try {\n        const result = yield call(loadPostAPI, action.data)\n        yield put({\n            type: LOAD_POST_SUCCESS,\n            data: result.data,\n        });\n    } catch(err) {\n        yield put({\n            type: LOAD_POST_FAILURE,\n            data:err.response.data,\n        });\n    }\n}\n\nfunction removePostAPI(data) {\n    return axios.delete('/post', data)\n}\n\nfunction* removePost(action) {\n    try {\n        yield delay(1000);\n        // const result = yield call(addPostAPI, action.data)\n        yield put({\n            type: REMOVE_POST_SUCCESS, //이건 포스트 리듀서 조작 부분, 밑에는 유저 리듀서 조작 부분\n            data: action.data\n        });\n        yield put({\n            type: REMOVE_POST_OF_ME, //saga는 동시에 여러 액션을 디스패치 가능. 어떤 액션이 여러 리듀서의 데이터를 동시에 바꿔야 한다면 이렇게 액션 여러 번 호출\n            data: action.data\n        })\n    } catch(err) {\n        yield put({\n            type:REMOVE_POST_FAILURE,\n            data:err.response.data,\n        });\n    }\n}\n\n\n\nfunction addCommentAPI(data) {\n    return axios.post(`/post/${data.postId}/comment`, data)\n}\n\nfunction* addComment(action) {\n    try {\n        const result = yield call(addCommentAPI, action.data)\n        yield put({\n            type: ADD_COMMENT_SUCCESS,\n            data: result.data,\n        })\n    } catch(err) {\n        yield put({\n            type:ADD_COMMENT_FAILURE,\n            data:err.response.data,\n        })\n    }\n}\n\nfunction likePostAPI(data) {\n    return axios.delete(`/post/${data}/like`)\n}\n\nfunction* likePost(action) {\n    try {\n        yield delay(1000);\n        // const result = yield call(addPostAPI, action.data)\n        yield put({\n            type: LIKE_SUCCESS,\n            data: action.data,\n        })\n    } catch(err) {\n        yield put({\n            type: LIKE_FAILURE,\n            data:err.response.data,\n        })\n    }\n}\n\nfunction unLikePostAPI(data) {\n    return axios.patch(`/post/${data}/like`)\n}\n\nfunction* unLikePost(action) {\n    try {\n        yield delay(1000);\n        // const result = yield call(addPostAPI, action.data)\n        yield put({\n            type: UNLIKE_SUCCESS,\n            data: action.data,\n        })\n    } catch(err) {\n        yield put({\n            type: UNLIKE_FAILURE,\n            data:err.response.data,\n        })\n    }\n}\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchLoadPost() {\n    yield throttle(1000, LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchRemovePost() {\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchLikePost() {\n    yield takeLatest(LIKE_REQUEST, likePost);\n}\n\nfunction* watchUnLikePost() {\n    yield takeLatest(UNLIKE_REQUEST, unLikePost);\n}\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchAddPost),\n        fork(watchLoadPost),\n        fork(watchRemovePost),\n        fork(watchAddComment),\n        fork(watchLikePost),\n        fork(watchUnLikePost),\n    ]);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}