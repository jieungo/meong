{"ast":null,"code":"import { all, fork, takeLatest, delay, put, throttle } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_FAILURE, LOAD_POST_SUCCESS, generateDummyPost, LIKE_FAILURE, LIKE_SUCCESS, LIKE_REQUEST, UNLIKE_FAILURE, UNLIKE_REQUEST, UNLIKE_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\nimport shortId from 'shortid';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    const id = shortId.generate();\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      //saga는 동시에 여러 액션을 디스패치 가능. 어떤 액션이 여러 리듀서의 데이터를 동시에 바꿔야 한다면 이렇게 액션 여러 번 호출\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction loadPostAPI(data) {\n  return axios.get('/api/post', data);\n}\n\nfunction* loadPost(action) {\n  try {\n    yield delay(1000);\n    const id = shortId.generate(); // const result = yield call(addPostAPI, action.data)\n\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000); // const result = yield call(addPostAPI, action.data)\n\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      //이건 포스트 리듀서 조작 부분, 밑에는 유저 리듀서 조작 부분\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      //saga는 동시에 여러 액션을 디스패치 가능. 어떤 액션이 여러 리듀서의 데이터를 동시에 바꿔야 한다면 이렇게 액션 여러 번 호출\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    yield delay(1000); // const result = yield call(addPostAPI, action.data)\n\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    yield delay(1000); // const result = yield call(addPostAPI, action.data)\n\n    yield put({\n      type: LIKE_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LIKE_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction unLikePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* unLikePost(action) {\n  try {\n    yield delay(1000); // const result = yield call(addPostAPI, action.data)\n\n    yield put({\n      type: UNLIKE_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNLIKE_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchLoadPost() {\n  yield throttle(1000, LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_REQUEST, likePost);\n}\n\nfunction* watchUnLikePost() {\n  yield takeLatest(UNLIKE_REQUEST, unLikePost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPost), fork(watchRemovePost), fork(watchAddComment), fork(watchLikePost), fork(watchUnLikePost)]);\n}","map":{"version":3,"names":["all","fork","takeLatest","delay","put","throttle","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_FAILURE","LOAD_POST_SUCCESS","generateDummyPost","LIKE_FAILURE","LIKE_SUCCESS","LIKE_REQUEST","UNLIKE_FAILURE","UNLIKE_REQUEST","UNLIKE_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","shortId","addPostAPI","data","post","addPost","action","id","generate","result","call","type","content","err","response","loadPostAPI","get","loadPost","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","likePostAPI","likePost","unLikePostAPI","patch","unLikePost","watchAddPost","watchLoadPost","watchRemovePost","watchAddComment","watchLikePost","watchUnLikePost","postSaga"],"sources":["/Users/gojieun/Desktop/meong/prepare/front/sagas/post.js"],"sourcesContent":["import { all, fork, takeLatest, delay, put, throttle} from 'redux-saga/effects';\nimport axios from 'axios';\nimport {\n    ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\n    ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS,\n    REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\n    LOAD_POST_REQUEST, LOAD_POST_FAILURE, LOAD_POST_SUCCESS, generateDummyPost,\n    LIKE_FAILURE, LIKE_SUCCESS, LIKE_REQUEST, UNLIKE_FAILURE,\n    UNLIKE_REQUEST, UNLIKE_SUCCESS} from '../reducers/post';\nimport { ADD_POST_TO_ME , REMOVE_POST_OF_ME} from '../reducers/user';\nimport shortId from 'shortid';\n\nfunction addPostAPI(data) {\n    return axios.post('/api/post', data)\n}\n\nfunction* addPost(action) {\n    try {\n        const id = shortId.generate();\n        const result = yield call(addPostAPI, action.data)\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: {\n                id,\n                content: action.data\n            },\n        });\n        yield put({\n            type: ADD_POST_TO_ME, //saga는 동시에 여러 액션을 디스패치 가능. 어떤 액션이 여러 리듀서의 데이터를 동시에 바꿔야 한다면 이렇게 액션 여러 번 호출\n            data: id,\n        })\n    } catch(err) {\n        yield put({\n            type:ADD_POST_FAILURE,\n            data:err.response.data,\n        });\n    }\n}\n\nfunction loadPostAPI(data) {\n    return axios.get('/api/post', data)\n}\n\nfunction* loadPost(action) {\n    try {\n        yield delay(1000);\n        const id = shortId.generate();\n        // const result = yield call(addPostAPI, action.data)\n        yield put({\n            type: LOAD_POST_SUCCESS,\n            data: generateDummyPost(10),\n        });\n    } catch(err) {\n        yield put({\n            type: LOAD_POST_FAILURE,\n            data:err.response.data,\n        });\n    }\n}\n\nfunction removePostAPI(data) {\n    return axios.delete('/api/post', data)\n}\n\nfunction* removePost(action) {\n    try {\n        yield delay(1000);\n        // const result = yield call(addPostAPI, action.data)\n        yield put({\n            type: REMOVE_POST_SUCCESS, //이건 포스트 리듀서 조작 부분, 밑에는 유저 리듀서 조작 부분\n            data: action.data\n        });\n        yield put({\n            type: REMOVE_POST_OF_ME, //saga는 동시에 여러 액션을 디스패치 가능. 어떤 액션이 여러 리듀서의 데이터를 동시에 바꿔야 한다면 이렇게 액션 여러 번 호출\n            data: action.data\n        })\n    } catch(err) {\n        yield put({\n            type:REMOVE_POST_FAILURE,\n            data:err.response.data,\n        });\n    }\n}\n\n\n\nfunction addCommentAPI(data) {\n    return axios.post(`/api/post/${data.postId}/comment`, data)\n}\n\nfunction* addComment(action) {\n    try {\n        yield delay(1000);\n        // const result = yield call(addPostAPI, action.data)\n        yield put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data,\n        })\n    } catch(err) {\n        yield put({\n            type:ADD_COMMENT_FAILURE,\n            data:err.response.data,\n        })\n    }\n}\n\nfunction likePostAPI(data) {\n    return axios.delete(`/post/${data}/like`)\n}\n\nfunction* likePost(action) {\n    try {\n        yield delay(1000);\n        // const result = yield call(addPostAPI, action.data)\n        yield put({\n            type: LIKE_SUCCESS,\n            data: action.data,\n        })\n    } catch(err) {\n        yield put({\n            type: LIKE_FAILURE,\n            data:err.response.data,\n        })\n    }\n}\n\nfunction unLikePostAPI(data) {\n    return axios.patch(`/post/${data}/like`)\n}\n\nfunction* unLikePost(action) {\n    try {\n        yield delay(1000);\n        // const result = yield call(addPostAPI, action.data)\n        yield put({\n            type: UNLIKE_SUCCESS,\n            data: action.data,\n        })\n    } catch(err) {\n        yield put({\n            type: UNLIKE_FAILURE,\n            data:err.response.data,\n        })\n    }\n}\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchLoadPost() {\n    yield throttle(1000, LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchRemovePost() {\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchLikePost() {\n    yield takeLatest(LIKE_REQUEST, likePost);\n}\n\nfunction* watchUnLikePost() {\n    yield takeLatest(UNLIKE_REQUEST, unLikePost);\n}\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchAddPost),\n        fork(watchLoadPost),\n        fork(watchRemovePost),\n        fork(watchAddComment),\n        fork(watchLikePost),\n        fork(watchUnLikePost),\n    ]);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}