{"ast":null,"code":"import { all, fork, put, delay, takeLatest, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_SUCCESS, LOG_OUT_REQUEST, LOG_OUT_FAILURE, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, UNFOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS, FOLLOW_FAILURE, FOLLOW_SUCCESS, FOLLOW_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE, LOAD_USER_REQUEST } from '../reducers/user';\n\nfunction loadUserAPI() {\n  return axios.get('/user');\n}\n\nfunction* loadUser(action) {\n  try {\n    const result = yield call(loadUserAPI, action.data);\n    yield put({\n      type: LOAD_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logInAPI(data) {\n  //실제 서버에 데이터를 보내는 부분. *붙이지 않는다. data는 action.data\n  return axios.post('/user/login', data, {\n    withCredentials: true\n  });\n}\n\nfunction* logIn(action) {\n  //LOG_IN_REQUEST에 대한 매개변수가 여기로 전달이 된다. action.data는 로그인리퀘스트의 데이터\n  try {\n    const result = yield call(logInAPI, action.data); //loginAPI 실행하고 결괏값을 result로 받음.\n\n    yield put({\n      //put은 디스패치!\n      type: LOG_IN_SUCCESS,\n      data: result.data // data: result.data\t//result.data는 API에서의 요청 성공 결과\n\n    });\n  } catch (err) {\n    console.log(err);\n    yield put({\n      type: LOG_IN_FAILURE,\n      data: err.response.data //실패결과\n\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/user/logout', null, {\n    withCredentials: true\n  });\n}\n\nfunction* logOut() {\n  try {\n    yield call(logOutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI(data) {\n  return axios.post('http://localhost:3065/user', data); //여긴 제너레이터X. 실제로 서버에 요청을 보냄\n}\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data); //위의 리턴값을 result에 받음\n\n    console.log(result);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch. 밑의 action을 dispatch\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unFollowAPI() {\n  return axios.post('/api/unFollow');\n}\n\nfunction* unFollow(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield delay(1000);\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction followAPI() {\n  return axios.post('/api/follow');\n}\n\nfunction* follow(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield delay(1000);\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  // LOG_IN 액션 실행하면 뒤의 logIn 함수를 실행한다.\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp); //take, call 등 이펙트 앞에는 꼭 yield 붙임\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction* watchUnFollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unFollow);\n}\n\nfunction* watchLoadUser() {\n  yield takeLatest(LOAD_USER_REQUEST, loadUser);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp), fork(watchFollow), fork(watchUnFollow), fork(watchLoadUser)]);\n}","map":{"version":3,"names":["all","fork","put","delay","takeLatest","call","axios","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_SUCCESS","LOG_OUT_REQUEST","LOG_OUT_FAILURE","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","UNFOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","FOLLOW_FAILURE","FOLLOW_SUCCESS","FOLLOW_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","LOAD_USER_REQUEST","loadUserAPI","get","loadUser","action","result","data","type","err","console","error","response","logInAPI","post","withCredentials","logIn","log","logOutAPI","logOut","signUpAPI","signUp","unFollowAPI","unFollow","followAPI","follow","watchLogIn","watchLogOut","watchSignUp","watchFollow","watchUnFollow","watchLoadUser","userSaga"],"sources":["/Users/gojieun/Desktop/meong/prepare/front/sagas/user.js"],"sourcesContent":["import { all, fork, put, delay, takeLatest, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport {\n    LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE,\n    LOG_OUT_SUCCESS, LOG_OUT_REQUEST, LOG_OUT_FAILURE,\n    SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS,\n    UNFOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS,\n    FOLLOW_FAILURE, FOLLOW_SUCCESS, FOLLOW_REQUEST, \n    LOAD_USER_SUCCESS, LOAD_USER_FAILURE, LOAD_USER_REQUEST} from '../reducers/user';\n\nfunction loadUserAPI() {\n    return axios.get('/user');\n    }\n    \nfunction* loadUser(action) {\n    try {\n        const result = yield call(loadUserAPI, action.data);\n        yield put({\n        type: LOAD_USER_SUCCESS,\n        data: result.data,\n        });\n    } catch (err) {\n        console.error(err);\n        yield put({\n        type: LOAD_USER_FAILURE,\n        error: err.response.data,\n        });\n    }\n}\n\nfunction logInAPI(data) { //실제 서버에 데이터를 보내는 부분. *붙이지 않는다. data는 action.data\n\treturn axios.post('/user/login', data, { withCredentials: true })\n}\n\nfunction* logIn(action) { //LOG_IN_REQUEST에 대한 매개변수가 여기로 전달이 된다. action.data는 로그인리퀘스트의 데이터\ntry {\n\tconst result = yield call(logInAPI, action.data) //loginAPI 실행하고 결괏값을 result로 받음.\n    yield put({ //put은 디스패치!\n\t\ttype: LOG_IN_SUCCESS,\n        data: result.data,\n\t\t// data: result.data\t//result.data는 API에서의 요청 성공 결과\n\t});\n} catch (err) {\n    console.log(err);\n\tyield put({\n\t\ttype: LOG_IN_FAILURE,\n\t\tdata: err.response.data, //실패결과\n\t})\n}}\n\nfunction logOutAPI() {\n\treturn axios.post('/user/logout', null, { withCredentials: true });\n}\n\nfunction* logOut() {\ntry {\n\tyield call(logOutAPI)\n\tyield put({\n\t\ttype: LOG_OUT_SUCCESS,\n\t});\n} catch (err) {\n\tyield put({\n\t\ttype: LOG_OUT_FAILURE,\n\t\tdata: err.response.data,\n\t})\n}}\n\nfunction signUpAPI(data) {\n    return axios.post('http://localhost:3065/user', data); //여긴 제너레이터X. 실제로 서버에 요청을 보냄\n}\n\nfunction* signUp(action) {\n    try {\n        const result = yield call(signUpAPI, action.data) //위의 리턴값을 result에 받음\n        console.log(result);\n        yield put({\n            type: SIGN_UP_SUCCESS,\n        })\n    } catch(err) {\n        yield put({ // put은 dispatch. 밑의 action을 dispatch\n            type: SIGN_UP_FAILURE,\n            error:err.response.data,\n        })\n    }\n}\n\nfunction unFollowAPI() {\n    return axios.post('/api/unFollow')\n}\n\nfunction* unFollow(action) {\n    try {\n        yield delay(1000);\n        yield put({\n            type: UNFOLLOW_SUCCESS,\n            data: action.data,\n        })\n    } catch(err) {\n        yield delay(1000);\n        yield put({ \n            type: UNFOLLOW_FAILURE,\n            error:err.response.data\n        })\n    }\n}\n\nfunction followAPI() {\n    return axios.post('/api/follow')\n}\n\nfunction* follow(action) {\n    try {\n        yield delay(1000);\n        yield put({\n            type: FOLLOW_SUCCESS,\n            data: action.data,\n        })\n    } catch(err) {\n        yield delay(1000);\n        yield put({ \n            type: FOLLOW_FAILURE,\n            error:err.response.data\n        })\n    }\n}\n\nfunction* watchLogIn() { // LOG_IN 액션 실행하면 뒤의 logIn 함수를 실행한다.\n\tyield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n\tyield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n    yield takeLatest(SIGN_UP_REQUEST, signUp); //take, call 등 이펙트 앞에는 꼭 yield 붙임\n}\n\nfunction* watchFollow() {\n\tyield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction* watchUnFollow() {\n\tyield takeLatest(UNFOLLOW_REQUEST, unFollow);\n}\n\nfunction* watchLoadUser() {\n    yield takeLatest(LOAD_USER_REQUEST, loadUser);\n}\n\n\nexport default function* userSaga() {\n    yield all([\n        fork(watchLogIn),\n        fork(watchLogOut),\n\t\tfork(watchSignUp),\n\t\tfork(watchFollow),\n\t\tfork(watchUnFollow),\n        fork(watchLoadUser),\n    ])\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}