{"ast":null,"code":"import { all, fork, put, delay, takeLatest, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_SUCCESS, LOG_OUT_REQUEST, LOG_OUT_FAILURE, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, UNFOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS, FOLLOW_FAILURE, FOLLOW_SUCCESS, FOLLOW_REQUEST } from '../reducers/user';\n\nfunction logInAPI(data) {\n  //실제 서버에 데이터를 보내는 부분. *붙이지 않는다. data는 action.data\n  return axios.post('/user/login', data, {\n    withCredentials: true\n  });\n}\n\nfunction* logIn(action) {\n  //LOG_IN_REQUEST에 대한 매개변수가 여기로 전달이 된다. action.data는 로그인리퀘스트의 데이터\n  try {\n    const result = yield call(logInAPI, action.data); //loginAPI 실행하고 결괏값을 result로 받음.\n\n    yield put({\n      //put은 디스패치!\n      type: LOG_IN_SUCCESS,\n      data: result.data // data: result.data\t//result.data는 API에서의 요청 성공 결과\n\n    });\n  } catch (err) {\n    console.log(err);\n    yield put({\n      type: LOG_IN_FAILURE,\n      data: err.response.data //실패결과\n\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/user/logout', null, {\n    withCredentials: true\n  });\n}\n\nfunction* logOut() {\n  try {\n    yield call(logOutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI(data) {\n  return axios.post('http://localhost:3065/user', data); //여긴 제너레이터X. 실제로 서버에 요청을 보냄\n}\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data); //위의 리턴값을 result에 받음\n\n    console.log(result);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch. 밑의 action을 dispatch\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unFollowAPI() {\n  return axios.post('/api/unFollow');\n}\n\nfunction* unFollow(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield delay(1000);\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction followAPI() {\n  return axios.post('/api/follow');\n}\n\nfunction* follow(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield delay(1000);\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  // LOG_IN 액션 실행하면 뒤의 logIn 함수를 실행한다.\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp); //take, call 등 이펙트 앞에는 꼭 yield 붙임\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction* watchUnFollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unFollow);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp), fork(watchFollow), fork(watchUnFollow)]);\n}","map":null,"metadata":{},"sourceType":"module"}